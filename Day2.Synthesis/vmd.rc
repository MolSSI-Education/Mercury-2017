############################################################################
#cr                                                                       
#cr            (C) Copyright 1995-2007 The Board of Trustees of the            
#cr                        University of Illinois                         
#cr                         All Rights Reserved                           
#cr                                                                       
############################################################################

############################################################################
# RCS INFORMATION:
#
#       $RCSfile: .vmdrc,v $
#       $Author: johns $        $Locker:  $                $State: Exp $
#       $Revision: 1.9 $      $Date: 2007/01/12 20:12:44 $
#
############################################################################
# DESCRIPTION:
#
# VMD startup script.  The commands here are executed as soon as VMD starts up
############################################################################

# turn on lights 0 and 1
light 0 on
light 1 on
light 2 off
light 3 off

# position the stage and axes
axes location lowerleft
stage location off

# position and turn on menus
menu main     move 5   225
menu display  move 395 30
menu graphics move 395 500
menu color    move 125 225
menu files    move 125 325
menu labels   move 125 525
menu render   move 125 525

menu main      on
#menu display  on
#menu graphics on
#menu color    on
#menu labels   on
#menu render   on
#menu files    on

# start the scene a-rockin'
# rock y by 1

# User's default values for newly loaded molecules/reps, etc
#  mol default color {colorID 5}
#  mol default style {NewCartoon 0.300000 6.000000 4.100000 0}
#  mol default selection {name CA}
#  mol default material {Transparent}

mol default style 
#mol default style {NewCartoon 0.300000 6.000000 4.100000 0}

#after idle {
# change default rep for already loaded molecules
#  mol representation {CPK 0.100000 0.100000 20.000000 20.000000}
#  mol representation {CPK 1.000000 0.300000 20.000000 20.000000}
#  foreach mid [molinfo list] {
#    mol delrep 0 $mid
#    mol addrep $mid
#  }
#} 

#=================#
#| Begin sscache |#
#=================#

# Cache secondary structure information for a given molecule
#VMD  --- start of VMD description block
#Name:
# SSCache
#Synopsis:
# Automatically stores secondary structure information for animations
#Version:
# 1.0
#Uses VMD version:
# 1.1
#Ease of use:
# 2
#Procedures:
# <li>start_sscache molid - start caching the given molecule
# <li>stop_sscache molid - stop caching
# <li>reset_sscache - reset the cache
# <li>sscache - internal function used by trace
#Description:
# Calculates and stores the secondary structure assignment for 
# each timestep.  This lets you see how the secondary structure
# changes over a trajectory.
# <p>
# It is turned on with the command "start_sscache> followed by the
# molecule number of the molecule whose secondary structure should be
# saved (the default is "top", which gets converted to the correct
# molecule index).  Whenever the frame for that molecule changes, the
# procedure "sscache" is called.
# <p>
#   "sscache" is the heart of the script.  It checks if a secondary
# structure definition for the given molecule number and frame already
# exists in the Tcl array sscache_data(molecule,frame).  If so, it uses
# the data to redefine the "structure" keyword values (but only for
# the protein residues).  If not, it calls the secondary structure
# routine to evaluate the secondary structure based on the new
# coordinates.  The results are saved in the sscache_data array.
# <p>
# Once the secondary structure values are saved, the molecule can be
# animated rather quickly and the updates can be controlled by the
# animate form.
# <p>
#  To turn off the trace, use the command "stop_sscache", which
# also takes the molecule number.  There must be one "stop_sscache"
# for each "start_sscache".  The command "clear_sscache" resets
# the saved secondary structure data for all the molecules and all the
# frames.
#Files: 
# <a href="sscache.vmd">sscache.vmd</a>
#See also:
# the VMD user's guide
#Author: 
# Andrew Dalke &lt;dalke@ks.uiuc.edu&gt;
#Url: 
# http://www.ks.uiuc.edu/Research/vmd/script_library/sscache/
#\VMD  --- end of block


# start the cache for a given molecule
proc start_sscache {{molid top}} {
    global sscache_data
    if {! [string compare $molid top]} {
	set molid [molinfo top]
    }
    global vmd_frame
    # set a trace to detect when an animation frame changes
    trace variable vmd_frame($molid) w sscache
    return
}

# remove the trace (need one stop for every start)
proc stop_sscache {{molid top}} {
    if {! [string compare $molid top]} {
	set molid [molinfo top]
    }
    global vmd_frame
    trace vdelete vmd_frame($molid) w sscache
    return
}


# reset the whole secondary structure data cache
proc reset_sscache {} {
    global sscache_data
    if [info exists sscache_data] {
        unset sscache_data
    }
    return
}

# when the frame changes, trace calls this function
proc sscache {name index op} {
    # name == vmd_frame
    # index == molecule id of the newly changed frame
    # op == w
    
    global sscache_data

    # get the protein CA atoms
    set sel [atomselect $index "protein name CA"]

    ## get the new frame number
    # Tcl doesn't yet have it, but VMD does ...
    set frame [molinfo $index get frame]

    # see if the ss data exists in the cache
    if [info exists sscache_data($index,$frame)] {
	$sel set structure $sscache_data($index,$frame)
	return
    }

    # doesn't exist, so (re)calculate it
    vmd_calculate_structure $index
    # save the data for next time
    set sscache_data($index,$frame) [$sel get structure]

    return
}

#proc sscache_loop {{molid top}} {
#    if {! [string compare $molid top]} {
#	set molid [molinfo top]
#    }
#    set nf [molinfo $molid get numframes]
#    puts "numframes = $nf"
#    for {set i 0} {$i < $nf} {incr i} { 
#	sscache $i $molid w
#    }
#}

# Instead I need to: 
# 1) Loop over the frames and run sscache 

#=================#
#|  End sscache  |#
#=================#

#==========================#
#|  Begin LP's functions  |#
#==========================#

# One of LP's favorite functions for displaying reactions
proc dbonds {molid} {
     color Labels Atoms black
     color Labels Bonds black
     color Labels Angles black
     color Labels Dihedrals black
     color Name C silver
     display projection Orthographic
     axes location Off
     color Display Background white
     #display resize 600 600
     display depthcue off
     display nearclip set 0.010000
     mol modselect 0 $molid not name \"H.*\"
     mol modstyle 0 $molid DynamicBonds 1.800000 0.150000 21.000000
     mol addrep $molid
     mol modselect 1 $molid all
     mol modstyle 1 $molid DynamicBonds 1.200000 0.150000 21.000000

     mol addrep $molid
     mol modstyle 2 $molid VDW 0.250000 27.000000
     mol modmaterial 0 $molid Diffuse
     mol modmaterial 1 $molid Diffuse
     mol modmaterial 2 $molid Diffuse
     material change ambient Diffuse 0.130000
}

# LP's function to align the trajectory to frame 0 using an atom selection (could be "all")
proc align {args} {
    set nf [molinfo top get numframes]
    set all [atomselect top all]
    set sel [atomselect top $args]
    set frame0 [atomselect top $args frame 0]
    #set frame0 [atomselect top all frame 0]
    puts "Aligning..."
    for { set i 1 } { $i <= $nf } { incr i } {
        if { ($i > 0) && ($i%10000 == 0) } {
            puts "Frame $i/$nf"
        }
        $all frame $i
        $sel frame $i
        $all move [measure fit $sel $frame0]
    }
    display resetview
}

# No teal carbons
color Name C silver

proc ss {molid} {
     display projection Orthographic
     display depthcue off
     display nearclip set 0.010000
     mol modstyle 0 $molid NewCartoon
     mol modcolor 0 $molid Structure
     start_sscache
     axes location Off
     set sel [atomselect top "protein"]
     # pbc wrap -all -centersel "segid P1" -center com -compound fragment
     # rmsdtt::align $sel 0 $sel
     # align protein
}

# Go to the first frame    
animate goto 0

puts "LP's VMD startup file successfully loaded"
